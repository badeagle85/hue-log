---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';

const posts = (await getCollection('blog'))
	.filter((post) => !post.data.draft)
	.sort(
		(a, b) => b.data.createdAt.valueOf() - a.data.createdAt.valueOf(),
	);
---

<!doctype html>
<html lang="ko">
	<head>
		<BaseHead title={`검색 - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
	</head>
	<body class="bg-white dark:bg-gray-900">
		<Header />
		<main class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
			<div class="max-w-6xl mx-auto">
				<!-- Search Header -->
				<div class="mb-8">
					<h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
						검색
					</h1>

					<!-- Search Input -->
					<div class="max-w-xl">
						<div class="relative">
							<input
								id="search-page-input"
								type="text"
								placeholder="검색어를 입력하세요..."
								class="w-full px-4 py-3 pl-12 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
							/>
							<svg class="absolute left-4 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
							</svg>
						</div>
					</div>
				</div>

				<!-- Search Results Count -->
				<div id="search-count" class="mb-6 text-gray-600 dark:text-gray-400 hidden">
					<span id="result-count"></span>개의 결과를 찾았습니다
				</div>

				<!-- Search Results Grid -->
				<div id="search-results-grid" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
					<!-- Results will be inserted here by JavaScript -->
				</div>

				<!-- No Results Message -->
				<div id="no-results" class="text-center py-20 hidden">
					<svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
					<p class="text-gray-500 dark:text-gray-400 text-lg">
						검색 결과가 없습니다
					</p>
				</div>

				<!-- Initial State -->
				<div id="initial-state" class="text-center py-20">
					<svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
					</svg>
					<p class="text-gray-500 dark:text-gray-400 text-lg">
						검색어를 입력하면 결과가 표시됩니다
					</p>
				</div>
			</div>
		</main>
		<Footer />
	</body>
</html>

<script>
	import Fuse from 'fuse.js';

	let searchIndex: any[] = [];
	let fuse: Fuse<any>;

	// Load search index
	async function loadSearchIndex() {
		try {
			const response = await fetch('/hue-log/search-index.json');
			searchIndex = await response.json();

			// Initialize Fuse.js
			fuse = new Fuse(searchIndex, {
				keys: ['title', 'description', 'content', 'tags', 'category'],
				includeScore: true,
				threshold: 0.3,
			});
		} catch (error) {
			console.error('Failed to load search index:', error);
		}
	}

	// Initialize on load
	document.addEventListener('DOMContentLoaded', () => {
		loadSearchIndex();

		const searchInput = document.getElementById('search-page-input') as HTMLInputElement;
		const searchResultsGrid = document.getElementById('search-results-grid');
		const searchCount = document.getElementById('search-count');
		const resultCount = document.getElementById('result-count');
		const noResults = document.getElementById('no-results');
		const initialState = document.getElementById('initial-state');

		// Get query parameter from URL
		const urlParams = new URLSearchParams(window.location.search);
		const query = urlParams.get('q');

		if (query && searchInput) {
			searchInput.value = query;
			performSearch(query);
		}

		// Search on input
		searchInput?.addEventListener('input', (e) => {
			const query = (e.target as HTMLInputElement).value;
			performSearch(query);

			// Update URL without page reload
			const url = new URL(window.location.href);
			if (query) {
				url.searchParams.set('q', query);
			} else {
				url.searchParams.delete('q');
			}
			window.history.replaceState({}, '', url);
		});

		function performSearch(query: string) {
			if (!searchResultsGrid || !searchCount || !resultCount || !noResults || !initialState) return;

			// Hide all states first
			searchCount.classList.add('hidden');
			noResults.classList.add('hidden');
			initialState.classList.add('hidden');

			if (query.trim() === '') {
				searchResultsGrid.innerHTML = '';
				initialState.classList.remove('hidden');
				return;
			}

			if (!fuse) {
				searchResultsGrid.innerHTML = '<div class="col-span-full text-center text-gray-500">검색 인덱스를 로드하는 중...</div>';
				return;
			}

			const results = fuse.search(query);

			if (results.length === 0) {
				searchResultsGrid.innerHTML = '';
				noResults.classList.remove('hidden');
				return;
			}

			// Show results count
			searchCount.classList.remove('hidden');
			resultCount.textContent = results.length.toString();

			// Display results
			searchResultsGrid.innerHTML = results.map(result => {
				const item = result.item;
				return `
					<article class="group">
						<a href="${item.url}" class="block">
							<div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 shadow-sm hover:shadow-lg transition-all duration-300 h-full">
								<div class="p-6">
									<div class="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 mb-2">
										${item.date ? `<span>${new Date(item.date).toLocaleDateString('ko-KR')}</span>` : ''}
										${item.category ? `
											<>
												<span>•</span>
												<span class="text-purple-600 dark:text-purple-400">
													${item.category}
												</span>
											</>
										` : ''}
									</div>

									<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
										${item.title}
									</h2>

									<p class="text-gray-600 dark:text-gray-300 line-clamp-3 mb-4">
										${item.description || ''}
									</p>

									${item.tags && item.tags.length > 0 ? `
										<div class="flex flex-wrap gap-2">
											${item.tags.slice(0, 3).map((tag: string) => `
												<span class="inline-block px-2 py-1 text-xs font-medium text-purple-700 dark:text-purple-300 bg-purple-100 dark:bg-purple-900/30 rounded">
													#${tag}
												</span>
											`).join('')}
										</div>
									` : ''}
								</div>
							</div>
						</a>
					</article>
				`;
			}).join('');
		}
	});
</script>

<style>
	.line-clamp-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
</style>